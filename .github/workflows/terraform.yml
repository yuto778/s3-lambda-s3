name: Terraform CI/CD

on:
  pull_request:
    branches: [dev]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      destroy:
        description: "本当に destroy しますか？"
        required: true
        default: "no"

env:
  TF_WORKING_DIR: "./"
  TF_VERSION: "1.5.7"
  AWS_REGION: "ap-northeast-1"

jobs:
  terraform-plan:
    name: "🗺️ Terraform Plan"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'dev'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init (with backend-config)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}"

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -no-color -input=false > plan.txt

      - name: Comment PR with Plan
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: plan.txt
          recreate: true

  terraform-apply:
    name: "🚀 Terraform Apply"
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init (with backend-config)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}"

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

  terraform-destroy:
    name: "💣 Terraform Destroy"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'yes'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init (with backend-config)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODB_TABLE }}"

      - name: Terraform Destroy
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform destroy -auto-approve
